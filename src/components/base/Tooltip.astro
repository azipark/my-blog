---
interface Props {
  text: string
  position?: 'top' | 'bottom' | 'left' | 'right'
  class?: string
}

const { text, position = 'top', class: className = '' } = Astro.props
---

<div class={`tooltip-container ${className}`} data-tooltip={text} data-position={position}>
  <slot />
</div>

<script>
    function initTooltips() {
    const tooltipContainers = document.querySelectorAll('.tooltip-container')
    
    tooltipContainers.forEach(container => {
      const tooltipText = container.getAttribute('data-tooltip')
      const position = container.getAttribute('data-position') || 'top'
      
      if (!tooltipText) return

      let tooltip: HTMLElement | null = null

      function createTooltip() {
        tooltip = document.createElement('div')
        tooltip.className = `tooltip tooltip-${position}`
        tooltip.textContent = tooltipText
        document.body.appendChild(tooltip)
        return tooltip
      }

      function showTooltip(e: Event) {
        if (!tooltip) {
          tooltip = createTooltip()
        }

        const rect = container.getBoundingClientRect()
        const tooltipRect = tooltip.getBoundingClientRect()
        
        let left = 0
        let top = 0

        switch (position) {
          case 'top':
            left = rect.left + rect.width / 2 - tooltipRect.width / 2
            top = rect.top - tooltipRect.height - 8
            break
          case 'bottom':
            left = rect.left + rect.width / 2 - tooltipRect.width / 2
            top = rect.bottom + 8
            break
          case 'left':
            left = rect.left - tooltipRect.width - 8
            top = rect.top + rect.height / 2 - tooltipRect.height / 2
            break
          case 'right':
            left = rect.right + 8
            top = rect.top + rect.height / 2 - tooltipRect.height / 2
            break
        }

        // Keep tooltip within viewport bounds
        const padding = 8
        left = Math.max(padding, Math.min(left, window.innerWidth - tooltipRect.width - padding))
        top = Math.max(padding, Math.min(top, window.innerHeight - tooltipRect.height - padding))

        tooltip.style.left = `${left}px`
        tooltip.style.top = `${top}px`
        tooltip.style.opacity = '1'
        tooltip.style.visibility = 'visible'
      }

      function hideTooltip() {
        if (tooltip) {
          tooltip.style.opacity = '0'
          tooltip.style.visibility = 'hidden'
        }
      }

      function removeTooltip() {
        if (tooltip) {
          tooltip.remove()
          tooltip = null
        }
      }

      container.addEventListener('mouseenter', showTooltip)
      container.addEventListener('mouseleave', hideTooltip)
      container.addEventListener('focus', showTooltip)
      container.addEventListener('blur', hideTooltip)

      // Clean up on page transitions
      document.addEventListener('astro:before-preparation', removeTooltip)
    })

    // Add viewport change listener
    let resizeTimeout: number
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout)
      resizeTimeout = window.setTimeout(() => {
        // Hide all tooltips on resize
        document.querySelectorAll('.tooltip').forEach(tooltip => {
          (tooltip as HTMLElement).style.opacity = '0';
          (tooltip as HTMLElement).style.visibility = 'hidden'
        })
      }, 100)
    })
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initTooltips)
  
  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initTooltips)
</script>

<style>
  .tooltip-container {
    position: relative;
    display: inline-block;
  }

  :global(.tooltip) {
    position: fixed;
    z-index: 9999;
    padding: 0.5rem 0.75rem;
    background: hsl(var(--popover));
    color: hsl(var(--popover-foreground));
    border: 1px solid hsl(var(--border));
    border-radius: 0.375rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
    pointer-events: none;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  :global(.tooltip::before) {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    border-style: solid;
  }

  :global(.tooltip-top::before) {
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    border-width: 4px 4px 0 4px;
    border-color: hsl(var(--border)) transparent transparent transparent;
  }

  :global(.tooltip-bottom::before) {
    top: -4px;
    left: 50%;
    transform: translateX(-50%);
    border-width: 0 4px 4px 4px;
    border-color: transparent transparent hsl(var(--border)) transparent;
  }

  :global(.tooltip-left::before) {
    right: -4px;
    top: 50%;
    transform: translateY(-50%);
    border-width: 4px 0 4px 4px;
    border-color: transparent transparent transparent hsl(var(--border));
  }

  :global(.tooltip-right::before) {
    left: -4px;
    top: 50%;
    transform: translateY(-50%);
    border-width: 4px 4px 4px 0;
    border-color: transparent hsl(var(--border)) transparent transparent;
  }
</style>
