---
import type { MarkdownHeading } from 'astro'
import { POSTS_CONFIG } from '~/config'
import { cn } from '~/lib/utils'

interface Props {
  headings: MarkdownHeading[]
  class?: string
}

const { headings, class: className } = Astro.props

// 优化过滤逻辑，减少遍历次数
const filteredHeadings = headings.reduce(
  (acc, heading) => {
    if (heading.depth <= 4 && heading.text.trim()) {
      acc.push({
        ...heading,
        text: heading.text.replace(/\s*[Hh][1-6]$/g, ''),
        order: acc.length + 1,
      })
    }
    return acc
  },
  [] as (MarkdownHeading & { order: number })[]
)

// 使用 Map 代替对象，提高查找效率
const indentClass = new Map([
  [2, ''],
  [3, 'ml-4'],
  [4, 'ml-8'],
])

function buildTocTree(headings: MarkdownHeading[]) {
  const tree: any[] = []
  const stack: any[] = []

  for (const heading of headings) {
    const item = {
      ...heading,
      children: []
    }

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop()
    }

    if (stack.length === 0) {
      tree.push(item)
    } else {
      stack[stack.length - 1].children.push(item)
    }

    stack.push(item)
  }

  return tree
}

const tocTree = buildTocTree(headings)

function renderTocItem(item: any, depth = 0) {
  const hasChildren = item.children && item.children.length > 0
  // Pre-calculate style classes to reduce runtime computation
  const linkClass = `
    block py-2 px-3 rounded-lg transition-all duration-200
    text-sm text-muted-foreground hover:text-foreground hover:bg-accent
    border-l-2 border-transparent hover:border-primary/30
    ${depth > 0 ? 'ml-4 text-xs' : ''}
    ${depth > 1 ? 'ml-8 opacity-75' : ''}
  `.trim()

  return `
    <li class="toc-item" data-level="${item.depth}">
      <a 
        href="#${item.slug}" 
        class="toc-link ${linkClass}"
        data-slug="${item.slug}"
      >
        ${item.text}
      </a>
      ${hasChildren ? `
        <ul class="mt-1 space-y-1">
          ${item.children.map((child: any) => renderTocItem(child, depth + 1)).join('')}
        </ul>
      ` : ''}
    </li>
  `
}
---

<div class={cn('fixed top-30 right-[calc(50%-384px)] translate-x-full w-64', className)}>
  <nav class="p-4">
    {/* 添加 loading="eager" 提高渲染优先级 */}
    <h2 class="text-lg font-medium mb-4 text-foreground/80">{POSTS_CONFIG.tocText}</h2>
    <div class="relative overflow-hidden h-[calc(100vh-24rem)]">
      {/* 使用 will-change 提示浏览器优化渲染 */}
      <ul
        class="space-y-2 absolute w-full transition-transform duration-300 will-change-transform"
        data-desktop-toc-list
        style="content-visibility: auto;"
      >
        {tocTree.length > 0 && (
          <Fragment set:html={tocTree.map(item => (
            <Fragment set:html={renderTocItem(item)} />
          )).join('')}
        )}
      </ul>
    </div>
  </nav>
</div>

<script>
  function initToc() {
    const tocLinks = document.querySelectorAll('.toc-link')
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6')
    
    if (!tocLinks.length || !headings.length) return

    let currentActiveLink: Element | null = null

    function setActiveLink(link: Element) {
      if (currentActiveLink) {
        currentActiveLink.classList.remove('active')
      }
      link.classList.add('active')
      currentActiveLink = link

      // Calculate target scroll position to center the active link
      const tocContainer = document.querySelector('.toc-container')
      if (tocContainer) {
        const containerRect = tocContainer.getBoundingClientRect()
        const linkRect = link.getBoundingClientRect()
        const targetScroll = tocContainer.scrollTop + linkRect.top - containerRect.top - containerRect.height / 2 + linkRect.height / 2
        
        tocContainer.scrollTo({
          top: targetScroll,
          behavior: 'smooth'
        })
      }
    }

    function updateActiveLink() {
      let activeHeading: Element | null = null
      
      for (const heading of headings) {
        const rect = heading.getBoundingClientRect()
        if (rect.top <= 100) {
          activeHeading = heading
        } else {
          break
        }
      }

      if (activeHeading) {
        const targetSlug = activeHeading.id
        const targetLink = document.querySelector(`.toc-link[data-slug="${targetSlug}"]`)
        if (targetLink && targetLink !== currentActiveLink) {
          setActiveLink(targetLink)
        }
      }
    }

    // Check currently visible heading on page load
    updateActiveLink()

    // Update active link on scroll
    let ticking = false
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateActiveLink()
          ticking = false
        })
        ticking = true
      }
    }

    window.addEventListener('scroll', onScroll, { passive: true })

    // Initialize after page content is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', updateActiveLink)
    }

    // Clean up on page transitions
    document.addEventListener('astro:before-preparation', () => {
      window.removeEventListener('scroll', onScroll)
    })
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initToc)
  
  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initToc)
</script>

<style>
  .toc-container {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--muted)) transparent;
  }

  .toc-container::-webkit-scrollbar {
    width: 4px;
  }

  .toc-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-container::-webkit-scrollbar-thumb {
    background: hsl(var(--muted));
    border-radius: 2px;
  }

  .toc-link.active {
    @apply text-primary bg-accent border-primary;
    font-weight: 500;
  }

  .toc-link:hover {
    transform: translateX(2px);
  }

  @media (max-width: 1200px) {
    .toc-container {
      display: none;
    }
  }
</style>
