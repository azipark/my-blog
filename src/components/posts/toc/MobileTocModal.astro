---
import type { MarkdownHeading } from 'astro'

interface Props {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

function buildTocTree(headings: MarkdownHeading[]) {
  const tree: any[] = []
  const stack: any[] = []

  for (const heading of headings) {
    const item = {
      ...heading,
      children: []
    }

    while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
      stack.pop()
    }

    if (stack.length === 0) {
      tree.push(item)
    } else {
      stack[stack.length - 1].children.push(item)
    }

    stack.push(item)
  }

  return tree
}

const tocTree = buildTocTree(headings)

function renderTocItem(item: any, depth = 0) {
  const hasChildren = item.children && item.children.length > 0
  const linkClass = `
    block py-3 px-4 text-left w-full rounded-lg transition-all duration-200
    text-foreground hover:bg-accent active:bg-accent/80
    ${depth > 0 ? 'ml-4 text-sm opacity-90' : 'text-base'}
    ${depth > 1 ? 'ml-8 text-sm opacity-75' : ''}
  `.trim()

  return `
    <li class="mobile-toc-item">
      <button 
        class="mobile-toc-link ${linkClass}"
        data-slug="${item.slug}"
        type="button"
      >
        ${item.text}
      </button>
      ${hasChildren ? `
        <ul class="mt-2 space-y-1">
          ${item.children.map((child: any) => renderTocItem(child, depth + 1)).join('')}
        </ul>
      ` : ''}
    </li>
  `
}
---

<!-- Mobile TOC Toggle Button -->
<button
  id="mobile-toc-toggle"
  class="fixed bottom-4 right-4 z-50 flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground shadow-lg transition-all hover:scale-105 active:scale-95 md:hidden"
  aria-label="Toggle Table of Contents"
  type="button"
>
  <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
  </svg>
</button>

<!-- Mobile TOC Modal -->
<div
  id="mobile-toc-modal"
  class="fixed inset-0 z-40 hidden bg-background/80 backdrop-blur-sm md:hidden"
  role="dialog"
  aria-modal="true"
  aria-labelledby="mobile-toc-title"
>
  <div class="flex min-h-full items-end justify-center p-4">
    <div class="w-full max-w-md transform rounded-t-2xl bg-background p-6 shadow-xl transition-all">
      <div class="mb-4 flex items-center justify-between">
        <h3 id="mobile-toc-title" class="text-lg font-semibold text-foreground">
          Table of Contents
        </h3>
        <button
          id="mobile-toc-close"
          class="flex h-8 w-8 items-center justify-center rounded-full text-muted-foreground hover:bg-accent hover:text-foreground"
          aria-label="Close"
          type="button"
        >
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div class="max-h-96 overflow-y-auto">
        {tocTree.length > 0 ? (
          <ul class="space-y-2">
            {tocTree.map(item => (
              <Fragment set:html={renderTocItem(item)} />
            ))}
          </ul>
        ) : (
          <p class="text-center text-muted-foreground">No headings found</p>
        )}
      </div>
    </div>
  </div>
</div>

<script>
  function initMobileToc() {
    const toggleButton = document.getElementById('mobile-toc-toggle')
    const modal = document.getElementById('mobile-toc-modal')
    const closeButton = document.getElementById('mobile-toc-close')
    const tocLinks = document.querySelectorAll('.mobile-toc-link')

    if (!toggleButton || !modal || !closeButton) return

    function openModal() {
      if (modal) {
        modal.classList.remove('hidden')
        document.body.style.overflow = 'hidden'
      }
    }

    function closeModal() {
      if (modal) {
        modal.classList.add('hidden')
        document.body.style.overflow = ''
      }
    }

    // Handle link clicks
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const target = e.target as HTMLElement
        const slug = target.dataset.slug
        if (slug) {
          const heading = document.getElementById(slug)
          if (heading) {
            closeModal()
            // Wait for modal hide animation to complete before scrolling
            setTimeout(() => {
              heading.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
              })
            }, 200)
          }
        }
      })
    })

    // Event listeners
    toggleButton.addEventListener('click', openModal)
    closeButton.addEventListener('click', closeModal)

    // Close on backdrop click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal()
      }
    })

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal()
      }
    })
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initMobileToc)
  
  // Re-initialize on page transitions
  document.addEventListener('astro:page-load', initMobileToc)
</script>
