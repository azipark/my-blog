---
import type { Experience } from '~/types'

interface Props {
  experiences: Experience[]
}

const { experiences } = Astro.props

// 날짜를 기준으로 내림차순 정렬 (최신부터)
const sortedExperiences = experiences.sort((a, b) => {
  const dateA = a.endDate === 'Present' ? new Date() : new Date(a.endDate)
  const dateB = b.endDate === 'Present' ? new Date() : new Date(b.endDate)
  return dateB.getTime() - dateA.getTime()
})

function formatDate(dateString: string): string {
  if (dateString === 'Present') return 'Present'
  const date = new Date(dateString)
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })
}

function calculateDuration(startDate: string, endDate: string): string {
  const start = new Date(startDate)
  const end = endDate === 'Present' ? new Date() : new Date(endDate)
  
  const diffTime = Math.abs(end.getTime() - start.getTime())
  const diffMonths = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30))
  
  if (diffMonths < 12) {
    return `${diffMonths} month${diffMonths > 1 ? 's' : ''}`
  } else {
    const years = Math.floor(diffMonths / 12)
    const months = diffMonths % 12
    let result = `${years} year${years > 1 ? 's' : ''}`
    if (months > 0) {
      result += ` ${months} month${months > 1 ? 's' : ''}`
    }
    return result
  }
}
---

<div class="relative">
  <!-- 타임라인 선 -->
  <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary/30 via-primary/60 to-primary/30"></div>
  
  <div class="space-y-12">
    {sortedExperiences.map((experience, index) => (
      <div class="relative flex items-start gap-8 group">
        <!-- 타임라인 도트 -->
        <div class="relative z-10 flex-shrink-0">
          <div class={`w-4 h-4 rounded-full border-2 transition-all duration-300 group-hover:scale-125 ${
            experience.type === 'work' 
              ? 'bg-blue-500 border-blue-300 group-hover:bg-blue-400' 
              : 'bg-green-500 border-green-300 group-hover:bg-green-400'
          }`}>
          </div>
          <!-- 도트 주변 링 효과 -->
          <div class={`absolute inset-0 rounded-full animate-ping opacity-20 ${
            experience.type === 'work' ? 'bg-blue-500' : 'bg-green-500'
          }`} style="animation-duration: 3s;"></div>
        </div>

        <!-- 경험 카드 -->
        <div class="flex-1 bg-muted/50 hover:bg-muted/80 transition-all duration-300 rounded-lg p-6 shadow-sm hover:shadow-md border border-border/50 hover:border-border group-hover:translate-x-2">
          <div class="flex flex-col sm:flex-row sm:items-start justify-between gap-4 mb-4">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                {experience.logo && (
                  <img 
                    src={experience.logo} 
                    alt={`${experience.organization} logo`}
                    class="w-8 h-8 rounded object-cover"
                    loading="lazy"
                  />
                )}
                <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  experience.type === 'work' 
                    ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' 
                    : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                }`}>
                  <span class={`w-2 h-2 rounded-full mr-1.5 ${
                    experience.type === 'work' ? 'bg-blue-400' : 'bg-green-400'
                  }`}></span>
                  {experience.type === 'work' ? 'Work' : 'Education'}
                </span>
              </div>
              
              <h3 class="text-xl font-semibold text-foreground mb-1 group-hover:text-primary transition-colors">
                {experience.title}
              </h3>
              
              <p class="text-lg text-muted-foreground font-medium mb-1">
                {experience.organization}
              </p>
              
              <div class="flex items-center gap-2 text-sm text-muted-foreground/80">
                <span class="icon-[ph--map-pin] w-4 h-4"></span>
                {experience.location}
              </div>
            </div>

            <div class="text-right flex-shrink-0">
              <div class="text-sm font-medium text-foreground">
                {formatDate(experience.startDate)} - {formatDate(experience.endDate)}
              </div>
              <div class="text-xs text-muted-foreground/70 mt-1">
                {calculateDuration(experience.startDate, experience.endDate)}
              </div>
            </div>
          </div>

          <p class="text-muted-foreground leading-relaxed mb-4">
            {experience.description}
          </p>

          {experience.skills.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {experience.skills.map((skill) => (
                <span class="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-medium bg-background/60 text-foreground/80 border border-border/50 hover:bg-background transition-colors">
                  {skill}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>
</div> 