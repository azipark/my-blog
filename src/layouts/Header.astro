---
import { HEADER_LINKS } from '~/config'
import ThemeToggle from '~/components/theme/ThemeToggle'
import HeaderGradient from '~/components/theme/HeaderGradient.astro'
import HeaderLink from '~/components/base/HeaderLink.astro'

const { pathname } = Astro.url
---

{!pathname.includes('/posts/') && <HeaderGradient />}
<header 
  id="main-header"
  class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out bg-background/60 backdrop-blur-sm border-b border-border/30"
>
  <div id="header-content" class="mx-auto max-w-3xl flex justify-between px-3 sm:px-6 lg:px-8 py-4 transition-all duration-300 ease-in-out">
    <div class="flex gap-2 sm:gap-6 items-center min-w-0 flex-1">
      <a href="/" class="pointer-events-auto select-none transition-all duration-200 hover:scale-105 flex-shrink-0">
        <svg id="header-logo" class="size-6 sm:size-7 fill-current transition-all duration-300 ease-in-out">
          <use href="/favicon.svg#logo"></use>
        </svg>
      </a>
      <nav class="flex gap-1 sm:gap-2 min-w-0 flex-1">
        {
          HEADER_LINKS.map((link) => (
            <HeaderLink href={link.url} background>
              {link.name}
            </HeaderLink>
          ))
        }
      </nav>
    </div>
    <div class="flex items-center" transition:persist="header-theme-toggle">
      <ThemeToggle client:load />
    </div>
  </div>
</header>

<!-- Add spacing equal to header height -->
<div id="header-spacer" class="h-[68px] sm:h-[72px] transition-all duration-300 ease-in-out"></div>

<div class="relative max-w-3xl mx-auto pointer-events-none">
  <div aria-hidden="true" class="absolute inset-x-0 -top-14 bottom-0 mx-auto max-w-3xl">
    <div class="to-(--color-border)/50 absolute bottom-0 left-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
    <div class="to-(--color-border)/50 absolute bottom-0 right-0 top-0 w-px bg-gradient-to-b from-transparent to-75%"></div>
  </div>
</div>

<script>
  let lastScrollY = 0
  let scrollTimeout: NodeJS.Timeout

  function handleScroll() {
    const header = document.getElementById('main-header')
    const headerContent = document.getElementById('header-content')
    const headerLogo = document.getElementById('header-logo')
    const headerSpacer = document.getElementById('header-spacer')
    
    if (!header || !headerContent || !headerLogo || !headerSpacer) return

    const currentScrollY = window.scrollY
    const scrollDifference = Math.abs(currentScrollY - lastScrollY)
    const isMobile = window.innerWidth < 640
    
    // Only respond when the scroll distance is more than 5px (more sensitive)
    if (scrollDifference > 5) {
      if (currentScrollY <= 0) {
        // Top: default state
        header.classList.remove('shadow-lg')
        header.classList.add('bg-background/60', 'backdrop-blur-sm', 'border-border/30')
        header.classList.remove('bg-background/95', 'backdrop-blur-md', 'border-border/80')
        headerContent.classList.remove('py-3')
        headerContent.classList.add('py-4')
        
        if (isMobile) {
          headerLogo.classList.remove('size-5')
          headerLogo.classList.add('size-6')
          headerSpacer.classList.remove('h-[60px]')
          headerSpacer.classList.add('h-[68px]')
        } else {
          headerLogo.classList.remove('size-6')
          headerLogo.classList.add('size-7')
          headerSpacer.classList.remove('h-[64px]')
          headerSpacer.classList.add('h-[72px]')
        }
      } else if (currentScrollY > 50) {
        // On scroll: compact state
        header.classList.add('shadow-lg')
        header.classList.remove('bg-background/60', 'backdrop-blur-sm', 'border-border/30')
        header.classList.add('bg-background/95', 'backdrop-blur-md', 'border-border/80')
        headerContent.classList.remove('py-4')
        headerContent.classList.add('py-3')
        
        if (isMobile) {
          headerLogo.classList.remove('size-6')
          headerLogo.classList.add('size-5')
          headerSpacer.classList.remove('h-[68px]')
          headerSpacer.classList.add('h-[60px]')
        } else {
          headerLogo.classList.remove('size-7')
          headerLogo.classList.add('size-6')
          headerSpacer.classList.remove('h-[72px]')
          headerSpacer.classList.add('h-[64px]')
        }
      }
      
      lastScrollY = currentScrollY
    }

    // Detect scroll stop and fine-tune
    clearTimeout(scrollTimeout)
    scrollTimeout = setTimeout(() => {
      if (currentScrollY > 20 && currentScrollY <= 50) {
        // Smooth transition at mid-point
        const progress = (currentScrollY - 20) / 30 // Value between 0 and 1
        const opacity = 60 + (35 * progress) // From 60% to 95%
        
        header.style.backgroundColor = `hsl(var(--background) / ${opacity}%)`
        header.classList.toggle('backdrop-blur-sm', progress <= 0.5)
        header.classList.toggle('backdrop-blur-md', progress > 0.5)
      }
    }, 100)
  }

  function initHeader() {
    const header = document.getElementById('main-header')
    if (!header) return

    // Set initial state
    if (window.scrollY <= 0) {
      header.classList.remove('shadow-lg')
    } else if (window.scrollY > 50) {
      handleScroll() // Set according to current scroll position on refresh
    }

    // Register scroll event
    window.addEventListener('scroll', handleScroll, { passive: true })
    
    // Register resize event (for mobile/desktop switching)
    window.addEventListener('resize', handleScroll, { passive: true })
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', initHeader)
</script>
